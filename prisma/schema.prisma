generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?        @default("https://avatars.githubusercontent.com/u/10367109?v=4")
  grantId       String?
  grantEmail    String?
  username      String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  citta         String?
  indirizzo     String?
  nome_studio   String?
  telefono      String?
  isDeleted     Boolean        @default(false)
  accounts      Account[]
  Availability  Availability[]
  EventType     EventType[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Availability {
  id        String   @id @default(uuid())
  day       Day
  fromTime  String
  tillTime  String
  isActive  Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventType {
  id                String    @id @default(uuid())
  title             String
  duration          Int
  url               String
  description       String
  active            Boolean   @default(true)
  videoCallSoftware String    @default("Google Meet")
  configurationId   String    @unique
  userId            String
  createdAt         DateTime  @default(now())
  isDeleted         Boolean   @default(false)
  anticipo          Int       @default(0)
  buffer            Int       @default(0)
  cancellazione     Int       @default(0)
  luogo             String    @default("Nessuna informazione")
  meetings          Booking[]
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id              String    @id @default(uuid())
  bookingId       String    @unique
  startTime       Int
  endTime         Int
  name            String
  contact         String
  configurationId String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isDeleted       Boolean   @default(false)
  eventType       EventType @relation(fields: [configurationId], references: [configurationId])
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
